# Classic guess a number game

typename Answer = [|Low|Correct|High|];

sig readInt : () {Read:Int|_}~> Int
fun readInt() {var n = do Read; print(intToString(n)); n}

sig guess : () {Read:Int,Guess:(Int) -> Answer|_}~> ()
fun guess() {
  print("Take a guess>");
  var number = readInt();
  switch (do Guess(number)) {
    case Low -> print("Your guess is too low."); guess()
    case Correct -> print("Correct!!")
    case High -> print("Your guess is too high."); guess()
  }
}

fun isNil(xs) {
  switch (xs) {
    case [] -> true
    case _  -> false
  }
}

sig input : ([Int], Comp({Read:Int |e}, a)) {Read{_} |e}~> ()
fun input(guesses, m) {
  handle(m())(guesses -> guesses) {
    case Return(x) -> ()
    case Read(resume) ->
       switch(guesses) {
         case [] -> ()
         case g :: gs -> resume(g, gs)
       }
  }
}

sig mySecret : (Int, Comp({Guess:(Int) -> Answer|e}, a)) {Guess{_} |e}~> a
fun mySecret(secret, m) {
  handle(m()) {
    case Return(x) -> x
    case Guess(n,resume) ->
      if (n < secret) resume(Low)
      else if (n > secret) resume(High)
      else resume(Correct)
  }
}

fun example() {
  mySecret(42, fun() { input([64,32,48,40,44,42], guess) });
}
