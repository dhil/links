# Classic guess a number game

typename Answer = [|Low|Correct|High|];

sig readInt : () {Read:Int|_}~> Int
fun readInt() {var n = do Read; print(intToString(n)); n}

sig guess : (Int) {Guess:(Int) -> Answer |_}-> Answer
fun guess(n) {do Guess(n)}

sig game : () {Read:Int,Guess:(Int) -> Answer|_}~> ()
fun game() {
  print("Take a guess>");
  var number = do Read;
  switch (do Guess(number)) {
    case Low -> print("Wrong: Your guess is too low.\n"); game()
    case Correct -> print("Correct!!\n")
    case High -> print("Wrong: Your guess is too high.\n"); game()
  }
}

sig input : ([Int], Comp({Read:Int |e}, a)) -> Comp({Read{_} |e}, ())
fun input(guesses, m)() {
  handle(m())(guesses -> guesses) {
    case Return(x) -> ()
    case Read(resume) ->
       switch(guesses) {
         case [] -> ()
         case g :: gs -> print(intToString(g)); resume(g, gs)
       }
  }
}

sig mySecret : (Int, Comp({Guess:(Int) -> Answer|e}, a)) -> Comp({Guess{_} |e}, a)
fun mySecret(secret, m)() {
  handle(m()) {
    case Return(x) -> x
    case Guess(n,resume) ->
      if (n < secret) resume(Low)
      else if (n > secret) resume(High)
      else resume(Correct)
  }
}

fun example() {
  mySecret(42, input([64,32,48,40,44,42], game))()
}

sig history : (Comp({Guess:(Int) -> Answer|e}, a)) -> Comp({Guess:(Int) -> Answer|e}, [(Int,Answer)])
fun history(m)() {
  handle(m())([] -> hist) {
    case Return(_) -> hist
    case Guess(n, resume) ->
       var an = do Guess(n);
       resume(an, (n, an) :: hist)
  }
}

fun example2() {
  mySecret(42, history(input([64,32,48,40,44,42], game)))()
}
