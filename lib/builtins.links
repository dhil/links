## Declarations of Links builtins.

# Booleans.
infixr 3 &&;
infixr 2 ||;
alien builtin {
  not : (Bool) -> Bool = "%bool_not" [directstyle,primitive];
  ||  : (Bool, Bool) -> Bool = "%logical_or" [directstyle,primitive];
  &&  : (Bool, Bool) -> Bool = "%logical_and" [directstyle,primitive];
}

# Integer arithmetic operations.
infixl 6 +;
infixl 6 -;
infixl 7 *;
infixl 7 /;
infixl 7 `mod`;
infixr 8 ^;
alien builtin {
  +      : (Int, Int) -> Int = "%int_plus"   [directstyle,primitive];
  -      : (Int, Int) -> Int = "%int_minus"  [directstyle,primitive];
  *      : (Int, Int) -> Int = "%int_mult"   [directstyle,primitive];
  /      : (Int, Int) -> Int = "%int_div"    [directstyle,primitive];
  ^      : (Int, Int) -> Int = "%int_pow"    [directstyle,primitive];
  mod    : (Int, Int) -> Int = "%int_mod"    [directstyle,primitive];
  negate : (Int)      -> Int = "%int_negate" [directstyle];
}

# Floating point operations.
infixl 6 +.;
infixl 6 -.;
infixl 7 *.;
infixl 7 /.;
infixr 8 ^.;
alien builtin {
  +.      : (Float, Float) -> Float = "%float_plus"   [directstyle,primitive];
  -.      : (Float, Float) -> Float = "%float_minus"  [directstyle,primitive];
  *.      : (Float, Float) -> Float = "%float_mult"   [directstyle,primitive];
  /.      : (Float, Float) -> Float = "%float_div"    [directstyle,primitive];
  ^.      : (Float, Float) -> Float = "%float_pow"    [directstyle,primitive];
  negatef : (Float)        -> Float = "%float_negate" [directstyle];
  # Trig.
  floor   : (Float) -> Float  = "%float_floor"        [directstyle];
  ceiling : (Float) -> Float  = "%float_ceiling"      [directstyle];
  cos     : (Float) -> Float  = "%float_cos"          [directstyle];
  sin     : (Float) -> Float  = "%float_sin"          [directstyle];
  tan     : (Float) -> Float  = "%float_tan"          [directstyle];
  log     : (Float) -> Float  = "%float_log"          [directstyle];
  log10   : (Float) -> Float  = "%float_log10"        [directstyle];
  exp     : (Float) -> Float  = "%float_exp"          [directstyle];
  sqrt    : (Float) -> Float  = "%float_sqrt"         [directstyle];
}

# String concatenation.
infixr 8 ^^;
alien builtin ^^ : (String, String) -> String = "%str_cat" [directstyle];

# Polymorphic relational operators.
infix 4 ==;
infix 4 <>;
infix 4 <;
infix 4 >;
infix 4 <=;
infix 4 >=;
alien builtin {
  == : (a, a) -> Bool = "%rel_poly_eq"  [directstyle];
  <> : (a, a) -> Bool = "%rel_poly_neq" [directstyle];
  <  : (a, a) -> Bool = "%rel_poly_lt"  [directstyle];
  >  : (a, a) -> Bool = "%rel_poly_gt"  [directstyle];
  <= : (a, a) -> Bool = "%rel_poly_le"  [directstyle];
  >= : (a, a) -> Bool = "%rel_poly_ge"  [directstyle];
}

# Client side equality functions.
alien javascript {
  intEq    client : (Int   , Int)     -> Bool = "intEq";
  stringEq client : (String, String)  -> Bool = "stringEq";
  floatEq  client : (Float , Float)   -> Bool = "floatEq";
  floatNeq client : (Float , Float)   -> Bool = "floatNeq";
  objectEq client : (a     , a)       -> Bool = "objectEq";
}

# Conversion functions.
alien builtin {
  # Integers.
  intToString : (Int)    -> String = "%conv_int_to_string" [directstyle];
  intToFloat  : (Int)    -> Float  = "%conv_int_to_float"  [directstyle];
  intToXml    : (Int)    -> Xml    = "%conv_int_to_xml"    [directstyle];

  # Floating points.
  floatToInt    : (Float) -> Int    = "%conv_int_to_float"    [directstyle];
  floatToString : (Float) -> String = "%conv_float_to_string" [directstyle];
  floatToXml    : (Float) -> Xml    = "%conv_float_to_xml"    [directstyle];

  # Strings.
  stringToInt   : (String) -> Int   = "%conv_string_to_int"   [directstyle];
  stringToFloat : (String) -> Float = "%conv_string_to_float" [directstyle];
  stringToXml   : (String) -> Xml   = "%conv_string_to_xml"   [directstyle];
}

# Exit.
alien builtin exit server : (a) ~> b = "%exit";
alien builtin sysexit server : (Int) ~> a = "%sysexit";

# Process related operations.
infix 6 !;
alien builtin {
  !                : forall a::Type(Any, Any) . (Process({hear:a|_}), a) ~> () = "%proc_send";
  recv             : () {:a|_}~> a                                             = "%proc_recv";
  self             : () {hear{a}|_}~> Process({ hear{a} })                     = "%proc_self";
  here             : () ~> Location                                            = "%proc_here";
  there            : () ~> Location                                            = "%proc_there";
  haveMail         : () {:_|_}~> Bool                                          = "%proc_have_mail";
  spawn            : (() ~e~@ _) ~> (Process ({ |e }))                         = "%proc_spawn";
  spawnAt          : (Location, () ~e~@ _) ~> Process ({ |e })                 = "%proc_spawn_at";
  spawnAngel       : (() ~e~@ _) ~> Process ({ |e })                           = "%proc_spawn_angel";
  spawnAngelAt     : (Location, () ~e~@ _) ~> Process ({ |e })                 = "%proc_spawn_angel_at";
  spawnWait        : (() { |e}~> a) ~> a                                       = "%proc_spawn_wait";
  spawnWait'       : () ~> a                                                   = "%proc_spawn_wait'";
  sleep            : (Int) ~> ()                                               = "%proc_sleep";
}

# Sessions.
alien builtin {
  send             : forall a::Type(Any, Any), s::Type(Any, Session). (a, !a.s) ~> s = "%session_send";
  receive          : forall a::Type(Any, Any), s::Type(Any, Session). (?a.s) ~> (a, s) = "%session_recv";
  link             : forall s::Type(Any, Session), e::Row(Unl, Any).(s, ~s) ~e~> () = "%session_link";
}

# Access points.
alien builtin {
  new         : forall s::Type(Any, Session). () ~> AP(s)         = "%ap_new";
  newAP       : forall s::Type(Any, Session). (Location) ~> AP(s) = "%ap_new_loc";
  newClientAP : forall s::Type(Any, Session). () ~> AP(s)         = "%ap_new_client";
  newServerAP : forall s::Type(Any, Session). () ~> AP(s)         = "%ap_new_server";
  accept      : forall s::Type(Any, Session). (AP(s)) ~> s        = "%ap_accept";
  request     : forall s::Type(Any, Session). (AP(s)) ~> ~s       = "%ap_request";
  cancel      : forall s::Type(Any, Session). (s) ~> ()           = "%ap_cancel";
  close       : (End) ~> ()                                       = "%ap_close";
}

# Lists.
infixr 5 ++;
infixr 9 ::;
alien builtin {
  list_nil : [a]               = "%list_nil"    [constant];    # TODO drop list_ prefix
  ::       : (a, [a]) -> [a]   = "%list_cons"   [directstyle];
  ++       : ([a], [a]) -> [a] = "%list_concat" [directstyle];
  hd       : ([a]) ~> a        = "%list_hd";
  tl       : ([a]) ~> [a]      = "%list_tl";
  length   : ([a]) -> Int      = "%list_length" [directstyle];
  take     : (Int, [a]) ~> [a] = "%list_take"   [directstyle];
  drop     : (Int, [a]) ~> [a] = "%list_drop"   [directstyle];
  max      : ([a]) ~> [|Some:a|None:()|] = "%list_max" [directstyle];
  min      : ([a]) ~> [|Some:a|None:()|] = "%list_min" [directstyle];
}

# XML.
alien builtin {
  childNodes       : (Xml) -> Xml                                 = "%xml_child_nodes";
  addAttributes    : (Xml, [(String, String)]) -> Xml             = "%xml_add_attributes";
  attribute        : (Xml, String) -> [|Just:String|Nothing|]     = "%xml_attribute" [directstyle];
  makeXml          : (String, [(String, String)], Xml) -> XmlItem = "%xml_make";
  xmlToVariant     : (Xml) ~> mu n.[ [|Text:String | Attr:(String, String) | Node:(String, n) | NsAttr: (String, String, String) | NsNode: (String, String, n) |] ]  = "%xml_to_variant";
  variantToXml     : (mu n.[ [|Text:String | Attr:(String, String) | Node:(String, n) | NsAttr: (String, String, String) | NsNode: (String, String, n) |] ]) ~> Xml  = "%xml_variant_to_xml";
  xmlItemToVariant : (XmlItem) ~> mu n. [|Text:String | Attr:(String, String) | Node:(String, [ n ]) | NsAttr: (String, String, String) | NsNode: (String, String, [ n ]) |] = "%xml_item_to_variant";
  variantToXmlItem : (mu n. [| Text: String | Attr: (String, String) | Node: (String, [ n ]) | NsAttr: (String, String, String) | NsNode: (String, String, [ n ]) |]) ~> XmlItem = "%xml_variant_to_xml_item";
  getTagName       : (Xml) ~> String                              = "%xml_get_tag_name";
  getNamespace     : (Xml) ~> String                              = "%xml_get_namespace";
  getAttributes    : (Xml) ~> [(String, String)]                  = "%xml_get_attributes";
  getChildNodes    : (Xml) ~> Xml                                 = "%xml_get_child_nodes";
  parseXml  server : (String) -> Xml                              = "%xml_parse";
}

# Client side XML functions.
alien javascript {
  getTextContent client : (Xml) ~> String            = "getTextContent";
  hasAttribute   client : (Xml, String) ~> Bool      = "hasAttribute"   [directstyle];
  getAttribute   client : (Xml, String) ~> String    = "getAttribute";
}

# DOM.
alien javascript {
  textContent        client : (DomNode) ~> String        = "textContent";
  isElementNode      client : (DomNode) ~> Bool          = "isElementNode";
  insertBefore       client : (Xml, DomNode) ~> ()       = "insertBefore";
  appendChildren     client : (Xml, DomNode) ~> ()       = "appendChildren";
  replaceNode        client : (Xml, DomNode) ~> ()       = "replaceNode";
  replaceDocument    client : (Xml) ~> ()       = "replaceDocument";
  removeNode         client : (DomNode) ~> ()            = "removeNode";
  cloneNode          client : (DomNode, Bool) ~> DomNode = "cloneNode";
  swapNodes          client : (DomNode, DomNode) ~> ()   = "swapNodes";
  getDocumentNode    client : () ~> DomNode              = "getDocumentNode";
  getNodeById        client : (String) ~> DomNode        = "getNodeById";
  getValue           client : (DomNode) ~> Xml           = "getValue";
  isNull             client : (DomNode) ~> Bool          = "isNull";

  domInsertBeforeRef client : (DomNode, DomNode) ~> ()   = "domInsertBeforeRef";
  domAppendChildRef  client : (DomNode, DomNode) ~> ()   = "domAppendChildRef";
  domReplaceChildren client : (Xml, DomNode) ~> ()       = "domReplaceChildren";
  domGetNodeValueFromRef    client : (DomNode) ~> String             = "domGetNodeValueFromRef";
  domGetTagNameFromRef      client : (DomNode) ~> String             = "domGetTagNameFromRef";
  domGetPropertyFromRef     client : (DomNode, String) ~> String     = "domGetPropertyFromRef";
  domSetPropertyFromRef     client : (DomNode, String, String) ~> () = "domSetPropertyFromRef";
  domHasAttribute           client : (DomNode, String) ~> Bool       = "domHasAttribute";
  domRemoveAttributeFromRef client : (DomNode, String) ~> ()         = "domRemoveAttributeFromRef";
  domGetAttributeFromRef    client : (DomNode, String) ~> String     = "domGetAttributeFromRef";
  domSetAttributeFromRef    client : (DomNode, String, String) ~> () = "domSetAttributeFromRef";
  domGetStyleAttrFromRef    client : (DomNode, String) ~> String     = "domGetStyleAttrFromRef";
  domSetStyleAttrFromRef    client : (DomNode, String, String) ~> () = "domSetStyleAttrFromRef";
  domGetChildrenFromRef     client : (DomNode) ~> [DomNode]          = "domGetChildrenFromRef";
  domSetAnchor              client : (String) ~> ()                  = "domSetAnchor";
  domGetAnchor              client : () ~> String                    = "domGetAnchor";
  # Navigation.
  parentNode                client : (DomNode) ~> DomNode            = "parentNode";
  firstChild                client : (DomNode) ~> DomNode            = "firstChild";
  nextSibling               client : (DomNode) ~> DomNode            = "nextSibling";
  # Event API.
  getTarget                 client : (Event) ~> DomNode              = "getTarget";
  getTargetValue            client : (Event) ~> String               = "getTargetValue";
  getTargetElement          client : (Event) ~> DomNode              = "getTargetElement";
  getPageX                  client : (Event) ~> Int                  = "getPageX";
  getPageY                  client : (Event) ~> Int                  = "getPageY";
  getFromElement            client : (Event) ~> DomNode              = "getFromElement";
  getToElement              client : (Event) ~> DomNode              = "getToElement";
  getTime                   client : (Event) ~> Int                  = "getTime";
  getCharCode               client : (Event) ~> Int                  = "getCharCode";
  getEvent                  client : ()      ~> Event                = "getCurrentEvent";
  # Forms.
  getInputValue             client : (String) ~> String              = "getInputValue";
  # Time.
  clientTime                client : () ~> Int                       = "clientTime";
  clientTimeMilliseconds    client : () ~> Int                       = "clientTimeMilliseconds";
}

# Server time.
alien builtin {
  serverTime             server : () ~> Int  = "%server_time";
  serverTimeMilliseconds server : () ~> Int  = "%server_time_ms";
}

# Time.
alien builtin {
  dateToInt : ((year:Int, month:Int, day:Int, hours:Int, minutes:Int, seconds:Int)) ~> Int = "%date_to_int";
  intToDate : (Int) ~> (year:Int, month:Int, day:Int, hours:Int, minutes:Int, seconds:Int) = "%date_int_to_date";
}

# Event handlers.
alien builtin {
  registerEventHandlers : ([(String, (Event) { |e}~> ())]) ~> String = "%register_event_handlers";
}

# Cookies.
alien builtin {
  setCookie : (String, String) ~> () = "%cookie_set";
  getCookie : (String) ~> String     = "%cookie_get";
}

# HTTP manipulation.
alien builtin {
  redirect : (String) ~> () = "%http_redirect";
}

# Database.
alien builtin {
  db_asList         : (TableHandle(r, w, n)) {}-> [r]    = "%db_as_list";
  getDatabaseConfig : () ~> (driver:String, args:String) = "%db_get_config";
}

# Characters.
alien builtin {
  ord : (Char) -> Int  = "%char_ord" [directstyle];
  chr : (Int)  -> Char = "%char_chr" [directstyle];
}

# Regexes.
alien builtin {
  tilde  : (String, Regex) -> Bool     = "%regex_tilde";
  ltilde : (String, Regex) ~> [String] = "%regex_ltilde";
  stilde : (String, Regex) ~> [String] = "%regex_stilde";
}

# Strings.
alien builtin {
  charAt      : (String, Int) ~> Char        = "%str_char_at";
  strsub      : (String, Int, Int) ~> String = "%str_sub";
  strlen      : (String) ~> Int              = "%str_len"     [directstyle];
  strescape   : (String) ~> String           = "%str_escape";
  strunescape : (String) ~> String           = "%str_unescape";
  strContains : (String, Char) ~> Bool       = "%str_contains";
  implode     : ([Char]) ~> String           = "%str_implode";
  explode     : (String) ~> [Char]           = "%str_explode";
}

# Unsafe.
alien builtin {
  unsafePickleCont server : (() { |e}-> a) ~> String = "%unsafe_pickle_cont";
  unsafe_cast      server : (a) ~> b                 = "%unsafe_cast";
}

# Misc.
alien builtin {
  random            : () -> Float     = "%random";
  environment       : () ~> [(String, String)] = "%environment";
  objectType client : (a) ~> String   = "_objectType";
  debug             : (String) ~> ()  = "%debug";
  debugObj client   : (a) ~> ()       = "%debug_object";
  dump client       : (a) ~> ()       = "%dump";
  print             : (String) ~> ()  = "%print";
  javascript        : Bool            = "%javascript" [constant];
  error             : (String) ~> a   = "%error";
  gensym server     : () -> Int       = "%gensym";
  show              : (a) -> String   = "%show";
}

# Game library.
typename Context2D = [||]; # Hack to simulate an alien abstract type.
alien javascript {
  jsSetInterval           client : (() ~e~> (), Int) ~e~> () = "jsSetInterval";
  jsRequestAnimationFrame client : (() ~e~> ()) ~e~> ()      = "jsRequestAnimationFrame";
  jsSave                  client : (a) ~> ()                 = "jsSave";
  jsRestore               client : (a) ~> ()                 = "jsRestore";
  jsSetOnKeyDown          client : (DomNode, (Event) ~e~> ()) ~e~> () = "jsSetOnKeyDown";
  jsSetOnEvent            client : (DomNode, String, (Event) ~e~> (), Bool) ~e~> () = "jsSetOnEvent";
  jsSetWindowEvent        client : (String, (Event) ~e~> (), Bool) ~e~> () = "jsSetWindowEvent";
  jsSetOnLoad             client : ((Event) ~e~> ()) ~e~> () = "jsSetOnLoad";
  jsSaveGlobalObject      client : (String, a) ~> ()         = "jsSaveGlobalObject";
  jsLoadGlobalObject      client : (String) ~> a             = "jsLoadGlobalObject";
  # Canvas specific operations.
  jsGetContext2D          client : (DomNode) ~> Context2D    = "jsGetContext2D";
  jsFillText              client : (Context2D, String, Float, Float) ~> () = "jsFillText";
  jsCanvasFont            client : (Context2D, String) ~> () = "jsCanvasFont";
  jsDrawImage             client : (Context2D, DomNode, Float, Float) ~> () = "jsDrawImage";
  jsFillRect              client : (Context2D, Float, Float, Float, Float) ~> () = "jsFillRect";
  jsFillCircle            client : (Context2D, Float, Float, Float) ~> () = "jsFillCircle";
  jsBeginPath             client : (Context2D) ~> ()         = "jsBeginPath";
  jsClosePath             client : (Context2D) ~> ()         = "jsClosePath";
  jsFill                  client : (Context2D) ~> ()         = "jsFill";
  jsArc                   client : (Context2D, Float, Float, Float, Float, Float, Bool) ~> () = "jsArc";
  jsMoveTo                client : (Context2D, Float, Float) ~> () = "jsMoveTo";
  jsLineTo                client : (Context2D, Float, Float) ~> () = "jsLineTo";
  jsLineWidth             client : (Context2D, Float) ~> ()  = "jsLineWidth";
  jsScale                 client : (Context2D, Float, Float) ~> () = "jsScale";
  jsTranslate             client : (Context2D, Float, Float) ~> () = "jsTranslate";
  jsStrokeStyle           client : (Context2D, a) ~> ()            = "jsStrokeStyle";
  jsStroke                client : (Context2D) ~> ()               = "jsStroke";
  jsSetFillColor          client : (Context2D, String) ~> ()       = "jsSetFillColor";
  jsClearRect             client : (Context2D, Float, Float, Float, Float) ~> () = "jsClearRect";
  jsCanvasWidth           client : (Context2D) ~> Float            = "jsCanvasWidth";
  jsCanvasHeight          client : (Context2D) ~> Float            = "jsCanvasHeight";
  jsSaveCanvas            client : (DomNode, DomNode, String) ~> () = "jsSaveCanvas";
}

# Sockets.
alien builtin {
  connectSocket  server : (String, Int) ~> [|Nothing|Just:Socket|] = "%socket_connect";
  writeToSocket  server : (String, Socket) ~> ()                   = "%socket_write";
  readFromSocket server : (Socket) ~> [|Nothing|Just:String|]      = "%socket_read";
  closeSocket    server : (Socket) ~> ()                           = "%socket_close";
}

# Routes.
alien builtin {
  addStaticRoute server : (String, String, [(String, String)]) ~> () = "%route_add_static";
  unsafeAddRoute server : (String, (String, Location) {hear{_}}~> a, (String, String, Location) {hear{_}}~> a) ~> () = "%route_add_unsafe";
}

# Serve.
alien builtin {
  servePages      server : () ~> () = "%serve_pages";
  serveWebsockets server : () ~> () = "%serve_websockets";
}

# Crypt.
alien builtin {
  crypt  server : (String) ~> String       = "%crypt_hash";
  verify server : (String, String) ~> Bool = "%crypt_verify";
}

# CLI.
alien builtin getArgs server : () ~> [String] = "%cli_get_args";
